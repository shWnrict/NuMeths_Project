print ('Hello World')
print("""
       __   __    __  .__   __.  _______                    _______. __    __       ___   ____    __    ____ .__   __. 
      |  | |  |  |  | |  \ |  | |   ____|     ___          /       ||  |  |  |     /   \  \   \  /  \  /   / |  \ |  | 
      |  | |  |  |  | |   \|  | |  |__       ( _ )        |   (----`|  |__|  |    /  ^  \  \   \/    \/   /  |   \|  | 
.--.  |  | |  |  |  | |  . `  | |   __|      / _ \/\       \   \    |   __   |   /  /_\  \  \            /   |  . `  | 
|  `--'  | |  `--'  | |  |\   | |  |____    | (_>  <   .----)   |   |  |  |  |  /  _____  \  \    /\    /    |  |\   | 
 \______/   \______/  |__| \__| |_______|    \___/\/   |_______/    |__|  |__| /__/     \__\  \__/  \__/     |__| \__| 
                                                         
 _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  
/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\ 
\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/

                                                        [1]-PRELIMS
                                                        [2]-MIDTERMS
                                                        [3]-FINALS
             ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ 
            |______|______|______|______|______|______|______|______|______|______|______|______|______|______|______|
""")

import sympy as sp

def bisection_method(f, a, b, tol=1e-5, max_iter=100):
    """
    f: function for which we are trying to approximate a solution f(x)=0
    a, b: interval in which to search for a solution
    tol: stopping criteria, terminates when |b - a| < tol
    max_iter: maximum number of iterations
    """
    if f.subs(x, a)*f.subs(x, b) >= 0:
        print("Bisection method fails.")
        return None
    iter_count = 0
    while ((b - a) >= tol) and (iter_count < max_iter):
        # Find middle point
        c = (a + b)/2
        # Check if middle point is root
        if f.subs(x, c) == 0.0:
            break
        # Decide the side to repeat the steps
        if f.subs(x, c)*f.subs(x, a) < 0:
            b = c
        else:
            a = c
        iter_count += 1
    print("The value of root is : ","%.4f"%c)
    return c

# User inputs
x = sp.symbols('x')
f = input("Enter a function: ")
a = float(input("Enter the start of the interval: "))
b = float(input("Enter the end of the interval: "))

# Convert the user input into a usable function
f = sp.sympify(f)

# Call the function
bisection_method(f, a, b)
