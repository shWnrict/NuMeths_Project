print("""
       __   __    __  .__   __.  _______                    _______. __    __       ___   ____    __    ____ .__   __. 
      |  | |  |  |  | |  \ |  | |   ____|     ___          /       ||  |  |  |     /   \  \   \  /  \  /   / |  \ |  | 
      |  | |  |  |  | |   \|  | |  |__       ( _ )        |   (----`|  |__|  |    /  ^  \  \   \/    \/   /  |   \|  | 
.--.  |  | |  |  |  | |  . `  | |   __|      / _ \/\       \   \    |   __   |   /  /_\  \  \            /   |  . `  | 
|  `--'  | |  `--'  | |  |\   | |  |____    | (_>  <   .----)   |   |  |  |  |  /  _____  \  \    /\    /    |  |\   | 
 \______/   \______/  |__| \__| |_______|    \___/\/   |_______/    |__|  |__| /__/     \__\  \__/  \__/     |__| \__| 
                                                         
 _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  _______  
/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\/______/\ 
\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/\__::::\/

                                            Shawn and June Padrid Project for Numerical Methods, CPE 401

                                                        [1]-PRELIMS  | Bisection Method
                                                        [2]-MIDTERMS | Secant Method
                                                        [3]-FINALS   | Gauss Jacobi Method
             ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ 
            |______|______|______|______|______|______|______|______|______|______|______|______|______|______|______|
""")

import numpy as np #library for arrays used for matrix and other math expressions

def prelim():
    print("""
          The subject matter for the Prelim period is about Bisection Method.
          Here is a recap for what bisection method is:

            ▪ The bisection method is one type of incremental search method in which the interval is always divided in half. 
            ▪ If a function changes sign over an interval, the function value at the midpoint is evaluated. 
            ▪ The location of the root is then determined as lying at the midpoint of the subinterval within which the sign change occurs. 
            ▪ The process is repeated to obtain refined estimates.
            ▪ Alternatively called binary chopping, interval halving, or Bolzano’s method,
          
            Advantages:
                  o Always convergent
                  o The root bracket gets halved with each iteration-guaranteed
          
            Disadvantages:
                  o Slow convergence
                  o If one of the initial guesses is close to the root, the convergence is slower
          


            Now, try Bisection Method with an example!
            Example Input: x**3 + 3*x - 5
          """)

    while True:
        exception_occurred = False
        try:
            def find_interval(f, x=0):
                """
                Try to find an interval where f changes sign.
                """
                if f(x) == 0:
                    return x, x
                elif f(x) > 0:
                    while f(x) > 0:
                        x -= 1
                    return x, x + 1
                else:
                    while f(x) < 0:
                        x += 1
                    return x - 1, x

            def interval_expression(x):
                return eval(expression)

            def bisection_method(f, x=0, tol=0.01, max_iter=100):
                a, b = find_interval(f, x)
                if a == b:
                    return a, 0, a, b, f(a), f(b), 0, 0, 0
                else:
                    iter_count = 1
                    while (abs(b - a) > tol) and (iter_count < max_iter):
                        c = (a + b) / 2.0
                        f_a = f(a)
                        f_b = f(b)
                        f_c = f(c)

                        print("{:<10} {:<10} {:<10} {:<10} {:<10} {:<10} {:<10} {:<10}".format(
                            iter_count, round(a, 4), round(b, 4), round(f_a, 4),
                            round(f_b, 4), round(c, 4), round(f_c, 4), round(b - a, 4)))

                        if f_a * f_c < 0:
                            b = c
                        else:
                            a = c

                        iter_count += 1

                    return (a + b) / 2.0, iter_count, a, b, f(a), f(b), c, f_c, b - a

            expression = input("Enter the function in terms of 'x': ")
            if exception_occurred == False:
                print(f"The equation is {expression}")
                print("{:<10} {:<10} {:<10} {:<10} {:<10} {:<10} {:<10} {:<10}".format("Iteration", "a", "b", "f(a)", "f(b)", "c=(a+b)/2", "f(c)", "b-a"))
                root, iterations, a, b, fa, fb, c, fc, ba = bisection_method(interval_expression)
                print("{:<10} {:<10} {:<10} {:<10} {:<10} {:<10} {:<10} {:<10}".format(
                                iterations, round(a, 4), round(b, 4), round(interval_expression(a), 4),
                                round(interval_expression(b), 4), round((a+b)/2, 4), round(interval_expression(root), 4), round(b - a, 4)))
                print(f"The interval where the function changes sign is {find_interval(interval_expression)}")
                print(f"The root of the function is approximately {root}, found in {iterations} iterations")
                print()

        except Exception as e:
            exception_occurred = True
            print(f"Invalid expression. Please enter a valid mathematical expression. Error: {e}")
            continue

        cont = input("Do you wish to continue with more examples? (y/n) ")
        print()
        if cont.lower() != 'y':
            break

def midterm():
    print("""
          The subject matter for the Prelim period is about Secant Method.
          Here is a recap for what Secant method is:

            The secant method is very similar to the bisection method except instead of dividing each interval 
            by choosing the midpoint the secant method divides each interval by the secant line connecting the 
            endpoints. The secant method always converges to a root of f(x)=0 provided that f(x) is continuous 
            on [a,b] and f(a)f(b)<0.
          
            Convergence rate of secant method is 1.62 which make it faster than bisection method.
            It is also an open-method.

            Now, try Secant Method with an example!
            Example Input: x**2 - x - 1
          """)
    
    while True:
        try:
            def find_interval(f, x=0):
                if f(x) == 0:
                    return x, x
                elif f(x) > 0:
                    while f(x) > 0:
                        x -= 1
                    return x, x + 1
                else:
                    while f(x) < 0:
                        x += 1
                    return x - 1, x

            def interval_expression(x):
                return eval(expression)

            def secant_method(f, x0, x1, tol=0.01, max_iter=100):
                iter_count = 0

                while iter_count < max_iter:
                    f_x0 = f(x0)
                    f_x1 = f(x1)

                    if abs(f_x1 - f_x0) < tol:
                        return x1, iter_count, x0, x1, f_x0, f_x1, x1 - x0

                    x2 = x1 - f_x1 * (x1 - x0) / (f_x1 - f_x0)

                    print("{:<10} {:<10} {:<10} {:<10} {:<10} {:<10}".format(
                        iter_count, round(x0, 4), round(x1, 4), round(f_x0, 4),
                        round(f_x1, 4), round(x2, 4)))

                    x0, x1 = x1, x2
                    iter_count += 1

                return x2, iter_count, x0, x1, f_x0, f_x1, x2 - x1

            expression = input("Enter the function in terms of 'x': ")
            print(f"The equation is {expression}")

            interval = find_interval(interval_expression)
            x0, x1 = interval

            print(f"The interval where the function changes sign is {interval}")

            print("{:<10} {:<10} {:<10} {:<10} {:<10} {:<10}".format("Iteration", "x0", "x1", "f(x0)", "f(x1)", "x2"))
            root, iterations, x0, x1, f_x0, f_x1, dx = secant_method(lambda x: eval(expression), x0, x1)
            print("{:<10} {:<10} {:<10} {:<10} {:<10} {:<10}".format(
                iterations, round(x0, 4), round(x1, 4), round(f_x0, 4),
                round(f_x1, 4), round(root, 4)))
            print(f"The root of the function is approximately {root}, found in {iterations} iterations")
            print()

        except Exception as e:
            print(f"An error occurred: {e}")

        cont = input("Do you wish to continue with more examples? (y/n) ")
        print()
        if cont.lower() != 'y':
            break

def finals():
    print("""
          The subject matter for the Finals period is about Cramer's Rule.
          Here is a recap for what Cramer's Rule is:

            Cramer's Rule is a method for solving a system of linear equations by dividing the values of determinants.
            It provides a formula for each variable in terms of the determinants of matrices obtained by replacing 
            one column of the coefficient matrix with the column of constants.

            If D is zero(0), the sytem of equations has no unique solution.
            Please note: 
            a1x + b1y + c1z = d1
            a2x + b2y + c2z = d2
            a3x + b3y + c3z = d3

            Now, try Cramer's Rule with an example for yourself!
            If you want to solve the following system of equations:
                        2x + y - z = 1
                        3x + 2y + 2z = 13
                        4x - 2y + 3z = 0
            Below is an example input for this 3 x 3 matrix
                Enter the number of variables in the system: 3
                Enter the coefficients of the coefficient matrix (one row at a time):
                Row 1: 2 1 -1
                Row 2: 3 2 2
                Row 3: 4 -2 3
                Enter the constants of the equation (right-hand side of the system): 1 13 9
          """)

    while True:
        try:
            def cramers_rule(A, b):
                n = len(b)
                det_A = np.linalg.det(A)

                if det_A == 0:
                    raise ValueError("The coefficient matrix is singular, and Cramer's Rule cannot be applied.")

                solutions = []
                for i in range(n):
                    Ai = A.copy()
                    Ai[:, i] = b
                    det_Ai = np.linalg.det(Ai)
                    xi = det_Ai / det_A
                    solutions.append(xi)

                return solutions

            n = int(input("Enter the number of variables in the system: "))
            A = np.zeros((n, n))
            b = np.zeros(n)

            print("Enter the coefficients of the coefficient matrix (one row at a time):")
            for i in range(n):
                A[i, :] = list(map(float, input(f"Row {i + 1}: ").split()))

            print("Enter the constants of the equation (right-hand side of the system):")
            b = list(map(float, input().split()))

            solutions = cramers_rule(A, b)

            rounded_solutions = [round(x, 4) for x in solutions]
            variable_names = ['x', 'y', 'z'][:n]

            print("\nThe solutions are:")
            for var, sol in zip(variable_names, rounded_solutions):
                print(f"{var}= {sol}")

            print()

        except Exception as e:
            print(f"An error occurred: {e}")

        cont = input("Do you wish to continue with more examples? (y/n) ")
        print()
        if cont.lower() != 'y':
            break

def menu():
    while True:
        print("""
        [1]-PRELIMS  | Bisection Method
        [2]-MIDTERMS | Secant Method
        [3]-FINALS   | Gauss Jacobi Method
        [4]-EXIT
        """)
        choice = int(input("Enter your choice: "))
        if choice == 1:
            prelim()
        elif choice == 2:
            midterm()
        elif choice == 3:
            finals()
        elif choice == 4:
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter 1, 2, 3, or 4.")

menu()

